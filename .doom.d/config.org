#+TITLE: Literate Doom Emacs Configuration
#+AUTHOR: Victor Lopez (vmlopezr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
#+STARTUP: org-startup-folded: showall

* Basic Configuration
Set up user configuration.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Victor Lopez"
      user-mail-address "vmlopez.r@gmail.com")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(if (eq initial-window-system 'x)                 ; if started by emacs command or desktop file
  (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Set basic default settings.
#+BEGIN_SRC emacs-lisp
;; Set defaults
(setq
 undo-limit 80000000                         ; Raise undo-limit to 80Mb
 truncate-lines 0
 evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default t                         ; Nobody likes to loose work, I certainly don't
 inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
 truncate-string-ellipsis "â€¦"               ; Unicode ellispis are nicer than "...", and also save
 doom-font (font-spec :family "JetBrains Mono" :size 14)
 doom-variable-pitch-font (font-spec :family "Overpass" :size 16)
 doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
 display-line-numbers-type 'relative
 doom-theme 'doom-vibrant             ;;set emacs theme
 org-directory "~/org/"
 projectile-project-search-path '("~/Documents/GitHub/" "~/Documents/development"))
#+END_SRC

* Treemacs

Set icon colors for the project side bar and show hidden files by default. The actions added are used to
easily set the target window in which the selected files will open.

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (setq doom-themes-treemacs-theme "doom-colors")
  (setq treemacs-show-hidden-files t))
(treemacs-define-RET-action 'file-node-closed #'treemacs-visit-node-ace)
(treemacs-define-RET-action 'file-node-open #'treemacs-visit-node-ace)
#+END_SRC

* Projectile
Set projectile configurations to auto detect projects.
#+BEGIN_SRC emacs-lisp
(after! projectile
  (projectile-mode)
  (projectile-load-known-projects))
(setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+END_SRC
* Doom-Modeline
Configuration for doom-modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-height 30)
  (setq doom-modeline-bar-width 30)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (custom-set-faces!
    '(doom-modeline-buffer-modified :foreground "red"))
    '(doom-modeline-evil-insert-state :weight bold :foreground "#339CDB")
  :hook
  (after-init . doom-modeline-mode))
#+END_SRC
* Auto-Dim-Other-Buffers
Set auto-dim-other-buffers to start when emacs loads. This is used to dim inactive buffers.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))
#+END_SRC

* Company
Set my configuration for company autocomplete.
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
  :custom
  (company-minimum-prefix-length 2)
  (company-tooltip-flip-when-above t)
  (company-tooltip-align-annotations t)
  (company-begin-commands '(self-insert-command))
  (company-require-match 'never)
  (company-global-modes '(not shell-mode eaf-mode))
  (company-idle-delay 0.3)
  (company-show-numbers t)
  :config
  (custom-set-faces! '(company-tooltip :background "#ff0000"))
  (global-company-mode 1)
  (set-company-backend! 'ess-r-mode '(company-R-args company-R-objects company-dabbrev-code :separate)))

(use-package company-quickhelp
  :ensure t
  :init
  (company-quickhelp-mode 1)
  (use-package pos-tip
  :ensure t))
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :ensure t
    :config
    ;;(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'typescript-mode-hook 'flycheck-mode)
    (add-hook 'elpy-mode-hook 'flycheck-mode)
)

#+END_SRC
* Typescript
The following are the typescript configurations.
** Typescript-Mode
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :ensure t
  :config
  (setq typescript-indent-level 2)
  (add-hook 'typescript-mode #'subword-mode))
#+END_SRC

** TIDE
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (flycheck-add-next-checker 'typescript-tide '(t . typescript-tslint) 'append)
  (company-mode +1))
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook #'setup-tide-mode)
(use-package tide
  :init
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)))

#+END_SRC
* Web-Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.html?\\'" . web-mode)
         ("\\.tsx\\'" . web-mode)
         ("\\.jsx\\'" . web-mode))
  :config
  (setq web-mode-markup-indent-offset 2
    web-mode-css-indent-offset 2
    web-mode-code-indent-offset 2
    web-mode-block-padding 2
    web-mode-comment-style 2
    web-mode-enable-css-colorization t
    web-mode-enable-auto-pairing t
    web-mode-enable-comment-keywords t
    web-mode-enable-current-element-highlight t
    web-mode-enable-auto-indentation nil)
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-equal "tsx" (file-name-extension buffer-file-name))
        (setup-tide-mode))))
    ;; enable typescript-tslint checker
    (flycheck-add-mode 'typescript-tslint 'web-mode))
#+END_SRC
* CSS-Mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config (setq css-indent-offset 2))
#+END_SRC
* Load Files
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(package-selected-packages (quote (org-plus-contrib))))
(custom-set-faces)
(load! "bindings")
#+END_SRC
