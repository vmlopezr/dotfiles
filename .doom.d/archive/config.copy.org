#+TITLE: Literate Doom Emacs Configuration
#+AUTHOR: Victor Lopez (vmlopezr)
#+PROPERTY: header-args :emacs-lisp :tangle yes :comments link
# #+STARTUP: fold

* Basic Configuration
Set up user configuration.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Victor Lopez"
      user-mail-address "vmlopez.r@gmail.com")
#+END_SRC

Set basic default settings.
#+BEGIN_SRC emacs-lisp
;; Set defaults

(require 'windsize)
(windsize-default-keybindings)
(require 'fill-column-indicator)
(add-hook 'emacs-lisp-mode-hook (lambda () (fci-mode 1)))
(setq
 org-startup-folded t
 fci-rule-width 1
 fci-rule-color "darkblue"
 fci-rule-column 80
 windsize-cols 10
 windsize-rows 10
 pos-tip-border-width 3
 pos-tip-use-relative-coordinates 1
 undo-limit 80000000                         ; Raise undo-limit to 80Mb
 truncate-lines t
 evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
 auto-save-default t                         ; Nobody likes to loose work, I certainly don't
 inhibit-compacting-font-caches t            ; When there are lots of glyphs, keep them in memory
 truncate-string-ellipsis "â€¦"               ; Unicode ellispis are nicer than "...", and also save
 doom-font (font-spec :family "JetBrains Mono" :size 14)
 doom-variable-pitch-font (font-spec :family "Overpass" :size 16)
 doom-serif-font (font-spec :family "IBM Plex Mono" :weight 'light)
 display-line-numbers-type 'relative
 doom-theme 'doom-vibrant ;;set emacs theme
 org-directory "~/org/"
 projectile-project-search-path '("~/Documents/GitHub/" "~/Documents/development"))
#+END_SRC
* Doom Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :demand t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-treemacs-theme "doom-colors")
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config)
  (require 'doom-themes-ext-org))
#+END_SRC
* Treemacs

Set icon colors for the project side bar and show hidden files by default. The actions added are used to
easily set the target window in which the selected files will open.
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config
  (setq
        treemacs-width 30
        treemacs-silent-refresh t
        treemacs-no-png-images nil
        treemacs-silent-filewatch t
        treemacs-file-event-delay 1000
        treemacs-sorting 'alphabetic-case-insensitive-desc
        treemacs-show-hidden-files t))
(treemacs-define-RET-action 'file-node-closed #'treemacs-visit-node-ace)
(treemacs-define-RET-action 'file-node-open #'treemacs-visit-node-ace)

;; (with-eval-after-load "treemacs"
;;   (defvar treemacs-custom-html-icon (all-the-icons-icon-for-file "file.ts"))
;;   (treemacs-define-custom-icon treemacs-custom-html-icon "zshrc" "tsx"))
;; (treemacs-load-theme "Default")
#+END_SRC
* All The Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  :config
  (setq all-the-icons-color-icons t))
#+END_SRC
* Projectile
Set projectile configurations to auto detect projects.
#+BEGIN_SRC emacs-lisp
(after! projectile
  (projectile-mode)
  (projectile-load-known-projects)
  (projectile-discover-projects-in-search-path))
(setq projectile-ignored-projects '("~/" "/tmp" "~/.emacs.d/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+END_SRC
* Doom-Modeline
Configuration for doom-modeline.
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :config
  (setq doom-modeline-height 30)
  (setq doom-modeline-bar-width 30)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-modal-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (custom-set-faces!
    '(doom-modeline-buffer-modified :foreground "red"))
    '(doom-modeline-evil-insert-state :weight bold :foreground "#339CDB")
  :hook
  (after-init . doom-modeline-mode))
#+END_SRC
* Auto-Dim-Other-Buffers
Set auto-dim-other-buffers to start when emacs loads. This is used to dim inactive buffers.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))
#+END_SRC

* Company
Set my configuration for company autocomplete.
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
  :custom
  (company-minimum-prefix-length 1)
  (company-tooltip-flip-when-above t)
  (company-tooltip-align-annotations t)
  (company-begin-commands '(self-insert-command))
  (company-require-match 'never)
  (company-global-modes '(not shell-mode eaf-mode))
  (company-idle-delay 0.1)
  :config
  (custom-set-faces!
    '(company-tooltip :background "#354069" :foreground "#aed4d0")
    '(company-tooltip-common :foreground "#f53302")
    '(company-tooltip-selection :background "#98d4f5" :foreground "#294757")
    )
  (global-company-mode 1)
  (set-company-backend! 'ess-r-mode '(company-R-args company-R-objects company-dabbrev-code :separate)))

(use-package company-posframe
  :config (company-posframe-mode 1))
#+END_SRC
* Editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config (editorconfig-mode 1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
    :ensure t
    :config
    (add-hook 'typescript-mode-hook 'flycheck-mode)
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (add-hook 'flycheck-mode-hook 'add-node-modules-path)
)

#+END_SRC
* JS & Related
The following are the typescript configurations.
** JSON
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json$")
(add-to-list 'flycheck-disabled-checkers 'json-python-json)
#+END_SRC
** Tide Setup Hook
#+BEGIN_SRC emacs-lisp
(defun tide-setup-hook ()
  (interactive)
  (tide-setup)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (flycheck-mode +1)
  ;; (flycheck-add-next-checker 'javascript-eslint 'typescript-tide)
  (flycheck-add-next-checker 'typescript-tide '(t . typescript-tslint) 'append)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (setq
   web-mode-enable-auto-quoting nil
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-attr-indent-offset 2
   web-mode-attr-value-indent-offset 2
   web-mode-code-indent-offset 2
   web-mode-block-padding 2
   web-mode-comment-style 2
   web-mode-enable-css-colorization t
   web-mode-enable-auto-pairing t
   web-mode-enable-html-entities-fontification t
   web-mode-enable-comment-keywords t
   web-mode-enable-current-element-highlight t
   web-mode-enable-auto-indentation nil)
   (set (make-local-variable 'company-backends)
       '((company-tide company-files :with company-yasnippet)
         (company-dabbrev-code company-dabbrev)))
   (flycheck-add-mode 'typescript-tslint 'web-mode)
  )
#+END_SRC
** TIDE
#+BEGIN_SRC emacs-lisp
;; (defun setup-tide-(message "")ode ()
;;   (eldoc-mode +1)
;;   (company-mode +1))
(use-package prettier-js
  :defer t)
(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'emacs-lisp-mode-hook (lambda () (fci-mode 1)))
(add-hook 'typescript-mode-hook #'setup-tide-mode)
(use-package tide
  :init
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)))

#+END_SRC
** Web-Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode (("\\.tsx$" . web-mode))
  :init
  (add-hook 'web-mode-hook 'variable-pitch-mode)
  (add-hook 'web-mode-hook 'company-mode)
  (add-hook 'web-mode-hook 'add-node-modules-path)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook (lambda () ( when (string-equal "tsx" (file-name-extension buffer-file-name))
        (tide-setup-hook)))))
#+END_SRC

** Typescript-Mode
#+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode (("\\.ts$" . typescript-mode))
  :init
  (add-hook 'typescript-mode-hook (lambda () ( when (string-equal "ts" (file-name-extension buffer-file-name))
        (tide-setup-hook))))
  (add-hook 'typescript-mode-hook 'add-node-modules-path)
  (add-hook 'typescript-mode #'subword-mode)
  (add-hook 'typescript-mode-hook 'company-mode)
  (add-hook 'typescript-mode-hook 'prettier-js-mode))

(setq-default typescript-indent-level 2)
(add-hook 'web-mode-hook (lambda () (fci-mode 1)))
(add-hook 'typescript-mode-hook (lambda () (fci-mode 1)))
#+END_SRC

* CSS-Mode
#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :config (setq css-indent-offset 2))
(use-package scss-mode
  :mode ("\\.scss$" "//.sass$"))
#+END_SRC
* Load Files
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(package-selected-packages (quote (org-plus-contrib))))
(custom-set-faces)
(load! "bindings")
#+END_SRC
